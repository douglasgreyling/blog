{"pageProps":{"posts":[{"slug":"organize-complex-sql-subqueries-using-with","frontmatter":{"id":12,"title":"Organize complex SQL subqueries using WITH","date":"August 29 2021"},"content":"<p>You might find yourself working with complex nested subqueries when writing raw SQL. I recently learned about <code>WITH</code> clauses and so here&#39;s how they might simplify your life.</p>\n<p>At birth, your subqueries start out simple, young, and so innocent, but as time goes on they mature, develop zits, need braces and require a lot of careful supervision to ensure that they do what you want them to do.</p>\n<p>You&#39;ve given birth to these children. Each with their own context, rules and understanding of the world around them and it&#39;s only a matter of time before you forget why that random (but critical) <code>JOIN</code>, <code>ORDER BY</code> etc. etc. was there in the first place.</p>\n<p>Throw in multiple subqueries, nest a few of them, and you&#39;ve got the perfect storm.</p>\n<h2 id=\"fun-with-names\">Fun <code>WITH</code> names</h2>\n<p>In comes the <code>WITH</code> clause. The hero you&#39;ve always needed, but never knew existed.</p>\n<p>The great thing about the <code>WITH</code> clause is that it allows you to refer to a query via a name. Almost like assigning it to a temporary table, or to a variable.</p>\n<p>The reason this is so powerful is because SQL (like any other code) is read many more times than it is written. By giving a query a useful, and intention revealing, name we can implicitly also bring the set of rules (or context) to mind which the query deserves. Suddenly that peculiar part of the query becomes much more intuitive.</p>\n<h2 id=\"time-for-some-sql-therapy\">Time for some SQL therapy</h2>\n<p>I&#39;m going to share a fairly simple, but contrived, example of where a <code>WITH</code> clause can shine. There is a simpler/better way to solve this particular problem, but this is just a silly example to illustrate what <code>WITH</code> does ðŸ˜œ &lt;/disclaimer&gt;</p>\n<p>To begin, let&#39;s assume:</p>\n<ul>\n<li>A customer has many subscriptions.</li>\n<li>A customer also has a column which records whether the customer would like us to contact them regarding promotions, or not.</li>\n<li>Each subscription tracks the date the subscription started, the date the subscription will end, and the value of the subscription.</li>\n</ul>\n</br>\n\n<p>We want to find all customers who have an active subscription where the subscription value is greater than, or equal to, $10. But remember, these customers must be willing to receive promo&#39;s!</p>\n<p>From this initial query, we&#39;ll then want to find all eligible &amp; interested male customers over the age of 25 and combine them with a list of all eligible &amp; interested female customers between 20 and 23.</p>\n<p>Imagine our original query looks like this:</p>\n<pre><code class=\"language-sql\">SELECT * FROM (\n  SELECT * FROM customers\n  INNER JOIN subscriptions ON customers.id = subscriptions.customer_id\n  WHERE subscription.value &lt;= 10 AND\n        NOW() &lt;= subscription.expiry_date AND\n        customer.wants_promos = 1 AND\n        customer.gender = &#39;M&#39; AND\n        25 &lt; customer.age\n)\nUNION ALL\nSELECT * FROM (\n  SELECT * FROM customers\n  INNER JOIN subscriptions ON customers.id = subscriptions.customer_id\n  WHERE subscription.value &lt;= 10 AND\n        NOW() &lt;= subscription.expiry_date AND\n        customer.wants_promos = 1 AND\n        customer.gender = &#39;F&#39; AND\n        20 &lt;= customer.age AND\n        customer.age &lt;= 23\n)\n</code></pre>\n<p>Using <code>WITH</code> we could clean it up to look like this:</p>\n<pre><code class=\"language-sql\">WITH interested_eligible_customers AS (\n  SELECT * FROM customers\n  INNER JOIN subscriptions ON customers.id = subscriptions.customer_id\n  WHERE subscription.value &lt;= 10 AND\n        NOW() &lt;= subscription.expiry_date AND\n        customer.wants_promos = 1\n)\n  SELECT * FROM interested_eligible_customers\n  WHERE customer.gender = &#39;M&#39; AND 25 &lt; customer.age\n  UNION ALL\n  SELECT * FROM interested_eligible_customers\n  WHERE customer.gender = &#39;F&#39; AND\n        20 &lt;= customer.age AND customer.age &lt;= 23\n</code></pre>\n<p>Once again. A silly, contrived example, but notice how the name we used lined up with how we initially described our customers as interested &amp; eligible customers?</p>\n<p>The following queries we made below the <code>WITH</code> clause became simpler since we could now refer to the subquery just like a normal table in our DB. Our query is a little more readable, intention revealing, and DRY.</p>\n<p>+1 for readability. +1 for understanding. +1 for DRY.</p>\n<p>When you find yourself using large subqueries (especially if it&#39;s nested once or twice), then you might benefit from slapping a nice name on that sucker.</p>\n<p><code>WITH</code> let&#39;s you focus on names and removes confusing subqueries through names instead of having the subqueries bloat your main query.</p>\n"},{"slug":"communication-between-angular-components","frontmatter":{"id":11,"title":"Communication Between Angular Components","date":"June 29 2020"},"content":"<p>I thought I could go through how to hook Angular components to each other so they can listen to each other listen for specific events. Angular components are able to receive a set of inputs, by decorating properties of the class with the <code>@Input</code> decorator, likewise we can set the outputs of a particular component using the <code>@Output</code> decorator.</p>\n<p>Letâ€™s imagine weâ€™re making a simple party app where we have two components in our app. The one has a button, which when clicked emits a party event. When this event is raised, our second component needs to flash the appropriate message, so we all know what to do.</p>\n<p>The one component (letâ€™s call it our <code>PartyButtonComponent</code>) is the component which displays the appropriate button. It needs to raise an event, when the button is clicked.\nIts controller will look like this:</p>\n<pre><code class=\"language-javascript\">import { Component, Output, EventEmitter } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;party-button&#39;,\n  templateUrl: &#39;./party-button.component.html&#39;,\n  styleUrls: [&#39;./party-button.component.css&#39;]\n})\nexport class PartyButtonComponent  {\n  @Output() onParty: EventEmitter&lt;null&gt; = new EventEmitter&lt;null&gt;();\n\n  party() {\n    this.onParty.emit();\n  }\n}\n</code></pre>\n<p>And its template will look something like this:</p>\n<pre><code class=\"language-html\">&lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; (click)=&quot;party()&quot;&gt;Party!&lt;/button&gt;\n</code></pre>\n<p>Here weâ€™ve created our party button component. Weâ€™ve created an <code>onParty</code> output, which uses an Angular Event Emitter so that Angular can pick up on our events and initiate change detection.</p>\n<p>The button in our template will emit the <code>onParty</code> event, when the <code>party</code> method is called by clicking the button.</p>\n<p>Now, in order for our second component (which weâ€™ll call the <code>PartyTextComponent</code>) to detect this event, it needs to listen to the <code>PartyButtonComponent</code>â€™s <code>onParty</code> event. We can do this like so:</p>\n<pre><code class=\"language-html\">&lt;party-button (onParty)=&quot;text.showPartyText()&quot;&gt;&lt;/party-button&gt;\n&lt;party-text #text&gt;&lt;/party-text&gt;\n</code></pre>\n<p>Here weâ€™ve defined our <code>PartyButtonComponent</code> and our <code>PartyTextComponent</code>. Weâ€™ve then defined a template variable called <code>text</code>, this creates a reference to <code>PartyTextComponent</code> which we can then use to call its <code>showPartyText()</code> method when the <code>onParty()</code> event is emitted from our <code>PartyButtonComponent</code>.</p>\n<pre><code class=\"language-javascript\">import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;party-text&#39;,\n  templateUrl: &#39;./party-text.component.html&#39;,\n  styleUrls: [&#39;./party-text.component.css&#39;]\n})\nexport class PartyTextComponent  {\n  private showText: Boolean = false;\n\n  showPartyText () {\n    this.showText = !this.showText;\n  }\n}\n</code></pre>\n<p>Here our <code>PartyTextComponent</code> is just keeping track of some state which will control whether, or not, the party text should be displayed. Iâ€™ll omit the template for this component since a simple directive is all you need to get this working.</p>\n<p>But thatâ€™s essentially it. This is a great way to allow components to listen to each other. The downside to this approach is that this method only allows us to have components communicate with each other in the template using template variables.</p>\n<p>There is a way to bring this code into the controllers of our components, but Iâ€™ll leave that for another blog.</p>\n"},{"slug":"how-angular-has-changed-my-react","frontmatter":{"id":10,"title":"How Angular Has Changed My React","date":"June 12 2020"},"content":"<p>Iâ€™ve recently been learning how to develop front end applications using Angular through some online courses. Angular isnâ€™t the first front end framework Iâ€™ve dealt with before. Iâ€™ve spent a significant amount of time working with React, although I donâ€™t consider myself a React expertâ€¦ yet.</p>\n<p>Whilst I havenâ€™t finished the current Angular course (and book) just yet, I can certainly say that Iâ€™ve learnt some valuable lessons from it all. Off the bat, I find that Angular has a steeper learning curve and I feel like thatâ€™s due to Angular having a more opinionated view on building components.</p>\n<p>React seems a little simpler since it feels like youâ€™re dealing more with plain old Javascript (or Typescript). I found props and state a little easier to grasp than understanding things like Angularâ€™s annotations and dependency injection.</p>\n<p>Thatâ€™s not to say that Angular isnâ€™t a great tool to use. If I had to share one thing which learning Angular has taught me, then it would be separation of concerns.</p>\n<h2 id=\"what-angular-has-taught-me\">What Angular has taught me</h2>\n<p>What Iâ€™m about to share is purely based, on my experience and how I came about learning React and Angular. So, this isnâ€™t some attempt to be a fan boy of one, or the other.</p>\n<p>In my experience so far, it appears that Angular does a better job at splitting things out across different files to make things simpler. For example, upon generating a component using <code>ng g c foo</code> you get the following files:</p>\n<pre><code>foo.component.css\nfoo.component.html\nfoo.component.ts\nfoo.component.spec.ts\n</code></pre>\n<p>Out the box things are split up and things are kept separate. Our <code>foo.component.ts</code> file acts as a type of controller for the component and this differs from React where controller logic could be defined in one class with our markup. With Angular we have an HTML file to build the markup, and a separate CSS file to define some styles which will only apply to this component using (or emulating) the Shadow DOM.</p>\n<h2 id=\"style-me-like-one-of-your-french-girls\">Style me like one of your French girls</h2>\n<p>I recently had to fix an annoying issue where we had CSS styling markup which was completely unrelated. The issue occurred because a new bit of code had been shipped into master with some new styling. A new CSS class was defined with the same name as a pre-existing CSS class. Our styles were stuck in a fight to the death to determine who was king.</p>\n<p>The Shadow DOM is like a bit of CSS that is scoped to a specific element. You can have the same class names elsewhere in your app, but your Shadow DOM CSS wonâ€™t stick its nose in another componentâ€™s business. It wasnâ€™t until I played with Angular that I learnt about this and I found this amazing! Itâ€™s this experience which lead me to learn about CSS modules. Something React can use to achieve the exact same thing.</p>\n<h2 id=\"at-your-service\">At your service</h2>\n<p>Another thing Angular casts some great emphasis on is the concept of services. I canâ€™t say that I know all the use cases where this might be useful, but a service is a class containing code which a component might use to query information (when its inserted into the DOM, or when some event is triggered).</p>\n<p>Querying data using HTTP is a prime example of something which could be extracted into a service. Our components shouldnâ€™t need to know that weâ€™re using HTTP, they should care about the DATA we get from HTTP.</p>\n<p>Our component becomes a little simpler in that our inputs become easier to reason about. There are less things to reason about in the scope of the context or component. The other win (which is equally as large) is that your component is so much easier to test. You donâ€™t have the headache of attempting to mock an HTTP service (at least in your component). Once again, your component becomes slightly more functional. Given X set of inputs, you can assert that it outputs Y in the expected format.</p>\n<p>Iâ€™ve adopted this same approach when using React. Keep the HTTP stuff out of your component, and then rather give it a service as a prop where the component can query what it needs by calling a set methods. Youâ€™ll save yourself so much headache when you need to test things. Itâ€™s made testing components so much more enjoyable for me.</p>\n<h2 id=\"nothing-is-perfect\">Nothing is perfect</h2>\n<p>The sad thing is that nothing is without fault. React or Angular in this instance.</p>\n<p>I really wish that React had friendlier out-the-box support for things like conditionally adding classes to components, or conditionally showing components (something that Angular does well using class binding and directives).</p>\n<p>On the flip side of the coin, I appreciate that reading React code is a little simpler when youâ€™re trying to see whatâ€™s a variable and what isnâ€™t, and Angular isnâ€™t quite as consistent in this regard. Angular has this weird quirk where a variable can appear in your HTML using curly braces (which is acceptable since its quite distinct from the rest of the markup), BUT a variable can also appear in your markup in the elements attributes as a string. Good luck debugging that as a noob.</p>\n"},{"slug":"sql-transactions","frontmatter":{"id":9,"title":"SQL Transactions","date":"May 23 2020"},"content":"<p>A transaction is a group of SQL statements which represent a single unit of work. So, all of the statements inside the transaction must be completed successfully or else the transaction will fail.</p>\n<p>A prime example could be a bank transaction. Weâ€™d have a problem if the withdrawal was successful, but the deposit never occurred. Weâ€™ve just lost money! Both events must be successful for the transaction to be complete.</p>\n<p>There are 4 key properties (ACID) of a good transaction:</p>\n<p>Atomicity: All statements are performed as one operation. They must all be successful, or else the transaction has failed. Think all or nothing.</p>\n<p>Consistency: The data must be consistent when a transaction starts and finishes. Like a bank transaction, we have not lost, or created, any extra money. The amount of funds is consistent.</p>\n<p>Isolation: Transactions are isolated from each other if they try to update the same data. Transactions are queued up to run one by one.</p>\n<p>Durability: The changes made by a transaction must persist if the transaction is successful. The changes must not be lost.</p>\n<h2 id=\"creating-a-transaction\">Creating a transaction:</h2>\n<pre><code class=\"language-sql\">START TRANSACTION;\n\nINSERT INTO users (points)\nVALUES (100);\n\nCOMMIT;\n</code></pre>\n<p>This is fairly simple example, but the point is clear. We just have to wrap our SQL statements with <code>START TRANSACTION</code> and <code>COMMIT</code>.</p>\n<h2 id=\"concurrency\">Concurrency:</h2>\n<p>So, when working with transactions, itâ€™s possible that two, or more, transactions might attempt to retrieve, or change, fields on one row in a database table. Because of this possibility we have some potential concurrency headaches we have to take note of:</p>\n<h3 id=\"lost-updates\">Lost updates:</h3>\n<p>This is when two transactions try to update the same row. The transaction that commits last will overwrite the changes the first transaction committed thus losing any updates which the first made.</p>\n<p>Imagine having a users table which tracks things like the users name and age.\nWe might have a user like this:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abe</td>\n<td>20</td>\n</tr>\n</tbody></table>\n<p>Transaction A updates the name like this:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abraham</td>\n<td>20</td>\n</tr>\n</tbody></table>\n<p>But whilst this is happening, transaction B comes along and updates the age:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abe</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<p>Not good! Weâ€™ve lost some data!</p>\n<h3 id=\"dirty-reads\">Dirty reads:</h3>\n<p>This occurs when we have a transaction which reads data which hasnâ€™t yet been committed.</p>\n<p>For example, transaction A is updating points belonging to a user. We then have transaction B do a calculation using points, and it reads the points which transaction A has set (but transaction A has not yet finished and committed its change). For some reason, transaction A fails and rolls back the value of the usersâ€™ points. The issue here is that transaction B might be using a value for points which is invalid, or which no longer exists (yet).</p>\n<h3 id=\"non-repeating-reads\">Non-repeating reads:</h3>\n<p>This is where data is read at two different times in one transaction, but the value has changed each time. For example, with the points. This might sound similar to dirty reads, but hereâ€™s the difference: We could be reading values which have been successfully committed.</p>\n<p>So essentially, we want the points to remain constant/consistent in the transaction.</p>\n<p>Imagine if transaction A queried points multiple times in a transaction, but transaction B came along and made a quick change to the points for the same user. Imagine trying to debug or recalculate that. Yikes!</p>\n<h3 id=\"phantom-reads\">Phantom reads:</h3>\n<p>This sort of issue occurs where we have transaction A which queries a table based on a certain criterion, letâ€™s say where points are greater than ten, but then right afterwards transaction B updates a user to have enough points to match the criteria.</p>\n<p>In some cases, it might be critical to ensure that we donâ€™t have anyone excluded from some queries weâ€™ve made.\nIn this case, the solution would be to track and wait for transactions which to finish which could potentially cause phantom reads.</p>\n<p>So how do we solve these issues?</p>\n<p>Luckily SQL has ways for transactions to overcome these issues using isolation levels. The following table shows the isolation level in the first column and what the isolation solves, marked with an â€˜Xâ€™:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Lost Updates</th>\n<th>Dirty Reads</th>\n<th>Non-Repeating Reads</th>\n<th>Phantom Reads</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td></td>\n<td>X</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td></td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n</tbody></table>\n<p>As we move from <code>READ UNCOMMITTED</code> to <code>SERIALIZABLE</code> weâ€™re increasing our isolation level (and vice versa) which means that we are solving more of our concurrency issues.</p>\n<p>Not all databases need the highest level of isolation, and one has to find the right balance of isolation vs performance. Increasing the level of isolation can slow down our transactions since we have to add locks and do things like wait for other transaction to finish etc.</p>\n<p>By default, MySQLâ€™s transaction isolation level is set to <code>REPEATABLE READ</code>.</p>\n<h2 id=\"viewing-our-isolation-level\">Viewing our isolation level:</h2>\n<p>You can see your isolation level like this:</p>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE â€˜transaction_isolationâ€™;\n</code></pre>\n<h2 id=\"setting-our-isolation-level\">Setting our isolation level:</h2>\n<p>We can set our isolation level to something different like this:</p>\n<pre><code class=\"language-sql\">SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n<p>However, this will only set the isolation level for the next transaction run. We can set it for all transaction in our session/connection like so:</p>\n<pre><code class=\"language-sql\">SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n<p>And finally, we can also set it globally for all sessions:</p>\n<pre><code class=\"language-sql\">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n<h2 id=\"deadlocks\">Deadlocks:</h2>\n<p>So, deadlocks really suck. Iâ€™ve had some bad experiences with them in the past, but they occur when different transactions cannot complete because each transaction has a lock on a row which the other transaction needs to access.</p>\n<p>For example:</p>\n<p>Transaction A</p>\n<pre><code class=\"language-sql\">START TRANSACTION;\n\nUPDATE customers SET state = â€˜VAâ€™ where customer_id = 1;\nUPDATE orders SET status = 1 WHERE order_id = 1;\n\nCOMMIT;\n</code></pre>\n<p>Transaction B</p>\n<pre><code class=\"language-sql\">START TRANSACTION;\n\nUPDATE orders SET status = 1 WHERE order_id = 1;\nUPDATE customers SET state = â€˜VAâ€™ where customer_id = 1;\n\nCOMMIT;\n</code></pre>\n<p>Both transactions could be run at roughly the same time, and a deadlock occurs because are waiting on each other. Transaction A needs the same orders row which transaction B is using, and transaction B is using the same customers row which transaction A needs.</p>\n<p>It can be a little difficult to deal with deadlocks, but we can keep an eye open for them when we write our queries. There are also strategies we can use to minimize this, like keeping our transactions as small as possible so that they complete as quick as possible (reducing the chance that the deadlock occurs), but that might be a topic for another dayâ€™s blog.</p>\n"},{"slug":"sql-events","frontmatter":{"id":8,"title":"SQL Events","date":"May 21 2020"},"content":"<p>An event in SQL is task, or block, of SQL code which gets executed based on a schedule. We can use it in situations where weâ€™d like to automate the maintenance of db data, like deleting stale audit data (at least in this example). This post continues on from #7, so be sure to read that one if you havenâ€™t.</p>\n<p>To start we need to turn the event scheduler on. This is the variable which tells our db to enable this kind of feature.</p>\n<p>We can try find it by doing something like this:</p>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE â€˜event%â€™;\n</code></pre>\n<p>We should see the variable name, and its value which will either be <code>ON</code> or <code>OFF</code>. We need it to be on and we can turn it on like this:</p>\n<pre><code class=\"language-sql\">SET GLOBAL event_scheduler = ON;\n</code></pre>\n<h2 id=\"creating-an-event\">Creating an event</h2>\n<p>Letâ€™s create our first event:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE EVENT yearly_delete_stale_audit_rows\nON SCHEDULE\n    EVERY 1 YEAR STARTS â€˜2020-01-01â€™ ENDS â€˜2022-01-01â€™\nDO BEGIN\n    DELETE FROM post_audits\n    WHERE date &lt; NOW() â€“ INTERVAL 1 YEAR;\nEND $$\n\nDELIMITER ;\n</code></pre>\n<p>And just like that weâ€™ve created an event, given it a name which describes when its gonna kick in. Events can either be a once off type thing and we can do that by replacing <code>ON SCHEDULE</code> with <code>USE AT â€˜2020-01-01â€™</code> which will only run this event on that date.</p>\n<p>In this case, weâ€™d like to make it run on a schedule where it starts on â€˜2020-01-01â€™ and it should end on â€˜2022-01-01â€™, although the <code>STARTS</code> and <code>END</code> keywords are completely optional.</p>\n<h2 id=\"viewing-events\">Viewing events</h2>\n<p>We can view our events like this:</p>\n<pre><code class=\"language-sql\">SHOW EVENTS;\n</code></pre>\n<p>And donâ€™t forget that we can also append <code>LIKE</code> to filter down results if we need to.</p>\n<h2 id=\"dropping-events\">Dropping events</h2>\n<p>Like most things we can delete them when we donâ€™t want them anymore.</p>\n<pre><code class=\"language-sql\">DROP EVENT yearly_delete_stale_audit_rows;\n</code></pre>\n<h2 id=\"altering-events\">Altering events</h2>\n<p>But what about when we want to change or disable or events?</p>\n<p>To change an event, use <code>ALTER EVENT</code>:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nALTER EVENT yearly_delete_stale_audit_rows\nON SCHEDULE\n    EVERY 1 YEAR STARTS â€˜2019-01-01â€™ ENDS â€˜2029-01-01â€™\nDO BEGIN\n    DELETE FROM post_audits\n    WHERE action_date &lt; NOW() â€“ INTERVAL 2 YEAR;\nEND $$\n\nDELIMITER ;\n</code></pre>\n<p>But that might be heavy handed, when all we want to do is temporarily disable an event like so:</p>\n<pre><code class=\"language-sql\">ALTER EVENT yearly_delete_stale_audit_rows DISABLE;\n</code></pre>\n<p>We can later replace <code>DISABLE</code> with <code>ENABLE</code> when we want to turn it back on!</p>\n<p>And just like that we have an event which cleans up our stale audit data!</p>\n"},{"slug":"sql-triggers","frontmatter":{"id":7,"title":"SQL Triggers","date":"May 20 2020"},"content":"<p>SQL triggers are essentially blocks of code which get automatically executed before (or after) insert, update, or delete statements. Theyâ€™re super handy for things like ensuring data consistency, but in todayâ€™s example weâ€™re gonna show how triggers can be a useful auditing tool.</p>\n<p>Letâ€™s say we have an app where users can create blogs posts. Users have the ability to create, edit and delete posts, but sometimes some usersâ€™ posts contain random changes which they swear they never added. We decide to create audit logs to track some of the changes made to the posts, like updating a blog post for example.</p>\n<p>To start things, lets imagine we have an audits table with the following info</p>\n<table>\n<thead>\n<tr>\n<th>post_audits</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>user_id</td>\n</tr>\n<tr>\n<td>post_id</td>\n</tr>\n<tr>\n<td>date</td>\n</tr>\n</tbody></table>\n<p>Weâ€™ll also imagine that our blog post table stores the user who last updated the post.</p>\n<h2 id=\"creating-a-sql-trigger\">Creating a SQL trigger</h2>\n<p>To begin, we create a SQL trigger like this:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE TRIGGER posts_after_update\n  AFTER UPDATE ON posts\n  FOR EACH ROW\nBEGIN\n  INSERT INTO post_audits\n  VALUES(\n    NEW.client_id,\n    NEW.post_id,\n    NEW.last_modified_user_id,\n    NOW()\n  );\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>Iâ€™m going to skip over some of the code thatâ€™s common with creating a stored procedure. If something is missing then be sure to check out post #5.</p>\n<p>In this case weâ€™ve created a trigger with a descriptive name which helps us know when this trigger is fired.</p>\n<p>We can create triggers whenever data inside a table is inserted, deleted or updated. We can select whether weâ€™d like this trigger to execute before or after the event has occurred. In this case our trigger fires after an update on the posts table, but we could change it to fire before by replacing <code>AFTER</code> with <code>BEFORE</code>.</p>\n<p>We then state that for every row changed, create a row in the <code>post_audits</code> table.</p>\n<p>The body of our trigger inserts some of the post data into our <code>post_audits</code> table. In this instance, weâ€™re interested in the updated values of the record being updated, so we refer to it using <code>NEW</code> followed by a <code>.</code> and the name of the field weâ€™d like to get.</p>\n<p>We can also refer to the old instance of the record using <code>OLD</code>.</p>\n<p>But just like that weâ€™re able to see what changes have been made for a particular post, but inspecting our <code>post_audits</code> table. Neat, right?</p>\n<h2 id=\"viewing-triggers\">Viewing triggers</h2>\n<p>We can see all of our triggers with:</p>\n<pre><code class=\"language-sql\">SHOW TRIGGERS;\n</code></pre>\n<p>This will show us all sorts of useful info like the triggerâ€™s name, the event which will cause it to fire, the table the trigger is set to watch, the actual trigger code, whether itâ€™s a before/after trigger and more.</p>\n<p>In some cases, you might have quite a few triggers, so donâ€™t forget that you can slap a <code>LIKE</code> on the end of that bad boy and filter the results.</p>\n<h2 id=\"dropping-triggers\">Dropping triggers</h2>\n<p>Dropping triggers is similar to dropping stored procedures.</p>\n<pre><code class=\"language-sql\">DROP TRIGGER payments_after_insert;\n</code></pre>\n<p>And thatâ€™s it! I hope this post audits example was a useful proof of concept for what can be down with triggers. I really liked it and might consider using it the next time I need to audit key data.</p>\n"},{"slug":"sql-functions","frontmatter":{"id":6,"title":"SQL Functions","date":"May 15 2020"},"content":"<p>Functions in SQL are very similar to stored procedures, but they are still different.</p>\n<p>Hereâ€™s a list of some basic differences between the two:</p>\n<ol>\n<li>A function must return a value, but a stored procedure doesnâ€™t have to. Stored procedures can return 0, or more, values/result sets.</li>\n<li>Functions can be called from procedures, but procedures cannot be called from functions.</li>\n<li>Stored procedures cannot be called in SQL statements using <code>SELECT</code>/<code>WHERE</code>/<code>HAVING</code>, but functions can be.</li>\n</ol>\n<p>This isnâ€™t a complete list, and Iâ€™m not sure that Iâ€™d bore you with those facts, but these are some of the cool ones I found. Thereâ€™s definitely more!</p>\n<p>The syntax for creating functions is very similar to the syntax used to create stored procedures.</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE FUNCTION get_average_amount_due(customer_id INT)\nRETURNS DECIMAL(9,2)\nREADS SQL DATA\nBEGIN\n  DECLARE average_amount_due DECIMAL(9, 2) DEFAULT 0;\n  DECLARE total_amount_due DECIMAL(9,2);\n  DECLARE total_invoices INT;\n\n  SELECT SUM(i.amount_due), COUNT(*)\n  INTO total_amount_due, total_invoices\n  FROM invoices i\n  WHERE i.customer_id = customer_id;\n\n  SET average_amount_due = total_amount_due / invoices_count;\n  RETURN IFNULL(average_amount_due, 0);\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>Ok! Thatâ€™s it. Done. Next post!</p>\n<p>Nah, letâ€™s break this down since thereâ€™s a lot going on. Be sure to read post #5 â€“ SQL Stored Procedures to catch up on any explanations I leave out.</p>\n<p>So, we start by stating that weâ€™re creating a function. Itâ€™s much like the definition for creating a stored procedure, except we also define what this function returns, and in this case its <code>DECIMAL(9,2)</code>. This is required when we define a function.</p>\n<p>Next we define some attributes for this function. Here weâ€™ve stated that this function reads sql data. Thereâ€™s not many attributes so Iâ€™ll quickly cover them:</p>\n<ol>\n<li><code>DETERMINISTIC</code> â€“ Given the same values, this function returns the same result. For example, imagine providing values which result in the cost of shipping on an order.</li>\n<li><code>READS SQL DATA</code> â€“ This function reads data from the database.</li>\n<li><code>MODIFIES SQL DATA</code> â€“ This function uses <code>UPDATE</code>, <code>INSERT</code> or <code>DELETE</code> statements.</li>\n</ol>\n<p>We can mix and match any of these, for example a function can use <code>READS SQL DATA</code> and <code>MODIFIES SQL DATA</code>. To do so, just add the next attribute after the other. So thatâ€™s attributes done and dusted</p>\n<p>Inside our function body we define some variables and their types using <code>DECLARE</code>. Our statement then sets <code>total_amount_due</code> and <code>total_invoices</code> in our select statement. After that we then set the value of <code>average_amount_due</code> to be <code>total_amount_due</code>/ <code>total_invoices</code>. Nothing too complex.</p>\n<p>Finally, we have to return a value for this function and it has to be a <code>DECIMAL(9,2)</code> and luckily it is. Weâ€™re doing a slight trick here to make sure that if the value is <code>NULL</code>, then we return 0.</p>\n<p>Thatâ€™s it!</p>\n<p>Now we can call this function inside a SQL statement like this:</p>\n<pre><code class=\"language-sql\">SELECT customer_id, get_average_amount_due(customer_id)\nFROM invoices;\n</code></pre>\n<p>Which would return a table that looks something like this:</p>\n<table>\n<thead>\n<tr>\n<th>customer_id</th>\n<th>get_average_amount_due(customer_id)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>90.21</td>\n</tr>\n</tbody></table>\n<p>To end this post, you can also remove a function when you donâ€™t need it anymore and thatâ€™s done like this:</p>\n<pre><code class=\"language-sql\">DROP FUNCTION get_average_amount_due;\n</code></pre>\n<p>And boom! Itâ€™s gone!</p>\n"},{"slug":"sql-stored-procedures","frontmatter":{"id":5,"title":"SQL Stored Procedures","date":"May 14 2020"},"content":"<p>SQL allows us to create something called a stored procedure. Itâ€™s basically code which has been saved so that we can call it and reuse it when we need it.</p>\n<p>We can even add things like parameters to our stored procedures, so itâ€™s super useful when we donâ€™t want to repetitively write and call a common query.</p>\n<p>Letâ€™s dive into some of the basics of stored procedures.</p>\n<h2 id=\"creating-a-stored-procedure\">Creating a stored procedure:</h2>\n<p>We create a stored procedure like this:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE get_invoices ()\nBEGIN\n  SELECT * FROM invoices;\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>Thereâ€™s a lot going on here so letâ€™s pick it apart.</p>\n<p>MySQL clients like MySQL workbench use the <code>;</code> delimiter to separate and execute statements.</p>\n<p>A stored procedure consists of multiple statements, but we need to define our stored procedure in a single statement so that SQL reads in the whole procedure definition at once. In order to do this, we need to use the <code>DELIMITER</code> keyword to temporarily redefine the default delimiter. We conventionally use the <code>$$</code> delimiter.\nOnce weâ€™ve done this, then our procedure definition is read as one statement, instead multiple separate statements.</p>\n<p>Next we give the stored procedure a name (<code>get_invoices</code> in this case) and we add the required parenthesis. Weâ€™ll talk about placing parameters inside the parenthesis later on.</p>\n<p>Everything between the <code>BEGIN</code> and <code>END</code> is called the procedure body and this is where we define our stored procedure.</p>\n<p>Once weâ€™ve defined the procedure body weâ€™ll close it with <code>END</code> and our new delimiter on the end to finish up our statement.</p>\n<p>Donâ€™t forget to set the default delimiter back to <code>;</code>!</p>\n<h2 id=\"calling-a-stored-procedure\">Calling a stored procedure:</h2>\n<p>We can call/execute a stored procedure like so:</p>\n<pre><code class=\"language-sql\">CALL get_invoices();\n</code></pre>\n<p>You might also see the same thing like this:</p>\n<pre><code class=\"language-sql\">EXEC get_invoices();\n</code></pre>\n<h2 id=\"adding-parameters-to-stored-procedures\">Adding parameters to stored procedures:</h2>\n<p>We can add parameters to our stored procedures by giving the parameter a name and a type between the procedureâ€™s parenthesis:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE get_invoices(amount_due DECIMAL(9, 2))\nBEGIN\n  SELECT * FROM invoices i\n  WHERE c.amount_due &lt;= amount_due;\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>We can then call our store procedure like this:</p>\n<pre><code class=\"language-sql\">CALL get_invoices(1000);\n</code></pre>\n<h2 id=\"some-stored-procedure-fun\">Some stored procedure fun:</h2>\n<p>We can do a bunch of cool things in stored procedures like default conditions when parameters are null.</p>\n<p>Here we return all invoices when our parameter is <code>NULL</code>:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE get_invoices(amount_due DECIMAL(9, 2))\nBEGIN\n  SELECT * FROM invoices i\n  WHERE i.amount_due = IFNULL(amount_due, i.amount_due);\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>And then call it like this:</p>\n<pre><code class=\"language-sql\">CALL get_invoices(NULL);\n</code></pre>\n<h2 id=\"validating-parameters\">Validating parameters</h2>\n<p>We can validate our parameters and use a signal statement to throw an error with the appropriate code which will describe what type of error occurred.</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE update_invoice(invoice_id INT, amount_due decimal(9, 2))\nBEGIN\n  IF amount_due &lt; 0 THEN\n   SIGNAL SQLSTATE â€˜22003â€™\n      SET MESSAGE_TEXT = â€˜Invalid amount_due;\n  END IF;\n\n  UPDATE invoices i\n  SET\n     i.amount_due = amount_due\n  WHERE i.invoice_id = invoice_id;\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>Thereâ€™s like a million different kinds of error codes. <a href=\"https://www.ibm.com/support/knowledgecenter/en/SSEPEK_11.0.0/codes/src/tpc/db2z_sqlstatevalues.html\">Check them out here</a>.</p>\n<h2 id=\"deletingdropping-stored-procedures\">Deleting/dropping stored procedures:</h2>\n<p>For the last part of our stored procedure crash course let&#39;s delete/drop a stored procedure:</p>\n<pre><code class=\"language-sql\">DROP PROCEDURE get_invoices;\n</code></pre>\n<p>Itâ€™s that simple!</p>\n"},{"slug":"deriving-tables-from-sub-queries","frontmatter":{"id":3,"title":"Deriving Tables From Sub-Queries","date":"May 10 2020"},"content":"<p>Hereâ€™s a quick lesson I learnt about. Hopefully it comes in handy some time.</p>\n<p>Iâ€™ve been learning a little about SQL sub-queries lately and I recently discovered that you can query a sub-query. I hope this makes sense, but Iâ€™m sure an actual example might make more sense.</p>\n<p>Letâ€™s say we have a table of customers like this:</p>\n<table>\n<thead>\n<tr>\n<th>first_name</th>\n<th>last_name</th>\n<th>points</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Andy</td>\n<td>Warhol</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>Bobby</td>\n<td>Brown</td>\n<td>234</td>\n</tr>\n<tr>\n<td>Candace</td>\n<td>Lady-face</td>\n<td>687</td>\n</tr>\n</tbody></table>\n<p>Letâ€™s say we made a query like so:</p>\n<pre><code class=\"language-sql\">SELECT first_name, points\nFROM customers;\n</code></pre>\n<p>And then we decided (for some strange reason) that we wanted to make another query on this result where we want to find our customers with 1000 points or more. We can do this like so:</p>\n<pre><code class=\"language-sql\">SELECT first_name\nFROM (\nSELECT first_name, points\nFROM customers\n) AS gold_customers\nWHERE points &gt;= 1000;\n</code></pre>\n<p>Now, at first this might not seem super powerful, but it could save us some effort. For example, imagine instead that we wanted to query the result of joining 2 tables together.</p>\n<p>We could derive a new table by joining those 2 tables and then we could query that new derived table in the same way we normally query any other table.</p>\n"},{"slug":"sql-views","frontmatter":{"id":4,"title":"SQL Views","date":"May 10 2020"},"content":"<p>The more I learn about SQL the more I realize that thereâ€™s a million different ways to query the same data, but sometimes you actually just want to use the same query over and over again to get some useful information.</p>\n<p>SQL views are the perfect way to ensure that you arenâ€™t copying and pasting the same verbose SQL statement over and over again just to query data from your database.</p>\n<p>A view is essentially a SQL statement which has been saved to create a type of in memory database. Itâ€™s super handy since it can take a complicated query and break it down so that you have time to focus on what matters most. There are so caveats though, no solution is perfect. Letâ€™s dive in and learn about SQL views!</p>\n<h2 id=\"creating-a-sql-view\">Creating a SQL View</h2>\n<p>Letâ€™s imagine we have a table called <code>suppliers</code> which tracks various information about the suppliers a business uses to get resources to perform various projects.</p>\n<p>If, for example, our business found that we kept performing the same sort of query where we want to find all suppliers where the amount of money spent on that supplier exceeded some threshold, then we could save ourselves some time by creating a SQL view like so:</p>\n<pre><code class=\"language-sql\">CREATE VIEW useful_suppliers AS\nSELECT name, address, amount_spent\nFROM suppliers\nWHERE 1000 &lt; amount_spent;\n</code></pre>\n<p>Now, instead of having to write the same select query a million times, we have it saved in our SQL db as a view which we can query like a table.</p>\n<h2 id=\"querying-data-from-a-sql-view\">Querying data from a SQL View</h2>\n<p>We can query a view much like any other SQL table.</p>\n<pre><code class=\"language-sql\">SELECT SUM(amount_spent) AS total_spent\nFROM useful_suppliers;\n</code></pre>\n<p>Inserting/updating data into a view is a little trickier since there are certain conditions which dictate when this is possible.</p>\n<p>For example, itâ€™s possible to update our view based on the following rules:</p>\n<ol>\n<li>Our query does not use the DISTINCT keyword.</li>\n<li>Our query does not use any summary function or set functions/operators.</li>\n<li>Our query does not use the ORDER BY clause.</li>\n<li>Our query does not join multiple tables.</li>\n<li>Our query does not use a WHERE clause containing subqueries.</li>\n<li>Our query does not use the GROUP BY or HAVING clauses.</li>\n</ol>\n<p>Provided we follow these rules, we can insert/update our view like anything else in SQL:</p>\n<pre><code class=\"language-sql\">INSERT INTO useful_suppliers (name, address, amount_spent)\nVALUES (â€˜Tools R Usâ€™, â€˜123 Sesame Roadâ€™, 1200);\n</code></pre>\n<p>And likewise delete anything:</p>\n<pre><code class=\"language-sql\">DELETE FROM useful_suppliers\nWHERE name = â€˜Tools R Usâ€™;\n</code></pre>\n<p>This does not mean that we cannot create a view which breaks these rules, but it just means that if we do break these rules, then we can no longer update the values directly using our view.</p>\n<h2 id=\"changingreplacing-a-sql-view\">Changing/replacing a SQL View</h2>\n<p>We can also change a view weâ€™ve created if our requirements ever change.</p>\n<pre><code class=\"language-sql\">REPLACE VIEW useful_suppliers\nSELECT name, amount_spent\nFROM suppliers\nWHERE 9999 &lt; amount_spent;\n</code></pre>\n<h2 id=\"deleting-a-sql-view\">Deleting a SQL view</h2>\n<p>We can also get rid of views which we donâ€™t need. Itâ€™s much like dropping any normal table in SQL.</p>\n<pre><code class=\"language-sql\">DROP VIEW useful_customers;\n</code></pre>\n<p>I hope this crash course on views has been insightful. Iâ€™ve had the unfortunate opportunity to have to come back to a database every few months, or so, just to perform the same painful and difficult-to-remember query.</p>\n<p>So, I was relieved to hear that such a thing existed in SQL. Next time you find yourself with the same issue, try to save yourself the pain and consider using a view!</p>\n"},{"slug":"sql-cross-join","frontmatter":{"id":2,"title":"SQL Cross Join","date":"May 8 2020"},"content":"<p>Letâ€™s say weâ€™re working in a database for a yet-to-be world-famous shoe company, named Shoe-pple. Shoe-pple is a bit of a peculiar company. Shoe-ppleâ€™s unique spin on shoes involves selling one type of shoe in almost any shade of colour possible.</p>\n<p>Our co-founder, Carl, is finally ready to launch the companyâ€™s first line of shoes, but first we need to list every shoe size and colour our manufacturer needs to make.</p>\n<p>Weâ€™ve got our planned shoe sizes stored in a database table named <code>sizes</code> and we also have our first set of colours stored in a database table named <code>shoe_colours</code>. We need to extract all of this data and then we need to create a list of every possible combination.</p>\n<p>Sounds tricky, but suddenly we remember that SQL Cross Joins can save the day!</p>\n<p>We can query all this information and then mix together all the possible combinations by making use of a SQL Cross Join, so letâ€™s do it!</p>\n<p>Weâ€™ll assume our table <code>sizes</code> consists of 3 basic sizes: 6, 7, and 8.\nWeâ€™ll also assume our table <code>shoe_colours</code> consists of 3 wonderful colours: lavender, maroon, and azure.</p>\n<p>Letâ€™s build a cross join to mix every combination like so:</p>\n<pre><code class=\"language-sql\">SELECT sizes.size, shoe_colours.colour\nFROM sizes\nCROSS JOIN shoe_colours;\n</code></pre>\n<p>And BOOM! Our result:</p>\n<table>\n<thead>\n<tr>\n<th>size</th>\n<th>colour</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>6</td>\n<td>Lavender</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Maroon</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Azure</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Lavender</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Maroon</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Azure</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Lavender</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Maroon</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Azure</td>\n</tr>\n</tbody></table>\n<p>Pretty simple, right? Our example might be a little contrived. Our example is simple to do by hand, but given a larger list things could get a little more complicated.</p>\n<p>You can also create a cross join by doing something like this:</p>\n<pre><code class=\"language-sql\">SELECT sizes.size, shoe_colours.colour\nFROM sizes, shoe_colours;\n</code></pre>\n<p>So just a friendly heads up in case you ever see that in the wild.</p>\n<p>Now that Shoe-pple has our list, itâ€™s time to begin its world shoe domination!</p>\n"},{"slug":"sql-self-join","frontmatter":{"id":1,"title":"SQL Self Join","date":"May 4 2020"},"content":"<p>I recently learnt that SQL has the ability to join a table to itself, this is called a self-join. This is possible when you have a table which has a column referencing the primary key.</p>\n<p>Letâ€™s say for example we have an employees table which looks something like this:</p>\n<table>\n<thead>\n<tr>\n<th>employee_id</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>manager_id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Abraham</td>\n<td>Lincoln</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>Benjamin</td>\n<td>Franklin</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Charlie</td>\n<td>Brown</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Douglas</td>\n<td>Greyling</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>So, for this example, <code>employee_id</code> is our primary key for all of our employees. The employees table has another column, <code>manager_id</code>, which tracks whether, or not, this employee has a manager. No manager id could mean that this employee is the head honcho in charge, or that they are a manager who reports to another manager. Makes sense?</p>\n<p>Either way, we can do a self-join on this table to find all employees who have managers.</p>\n<pre><code class=\"language-sql\">SELECT e.first_name, e.last_name, m.first_name AS manager\nFROM employees e\nJOIN employees m\nON e.manager_id = m.employee_id;\n</code></pre>\n<p>Or to be more succinct:</p>\n<pre><code class=\"language-sql\">SELECT e.first_name, e.last_name, m.first_name AS manager\nFROM employees e, employees m\nWHERE e.manager_id = m.employee_id;\n</code></pre>\n<p>Our result should look something like this:</p>\n<table>\n<thead>\n<tr>\n<th>first_name</th>\n<th>last_name</th>\n<th>manager</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Benjamin</td>\n<td>Franklin</td>\n<td>Abraham</td>\n</tr>\n<tr>\n<td>Charlie</td>\n<td>Brown</td>\n<td>Abraham</td>\n</tr>\n<tr>\n<td>Douglas</td>\n<td>Greyling</td>\n<td>Benjamin</td>\n</tr>\n</tbody></table>\n<p>And thatâ€™s it. I knew about the concept of joins, but I didnâ€™t realise that one could do a self-join. I thought this was pretty awesome!</p>\n"}]},"__N_SSG":true}