{"pageProps":{"posts":[{"slug":"organize-complex-sql-subqueries-using-with","frontmatter":{"id":12,"title":"Organize complex SQL subqueries using WITH","date":"August 29 2021"},"content":"<p>You might find yourself working with complex nested subqueries when writing raw SQL. I recently learned about <code>WITH</code> clauses and so here&#39;s how they might simplify your life.</p>\n<p>At birth, your subqueries start out simple, young, and so innocent, but as time goes on they mature, develop zits, need braces and require a lot of careful supervision to ensure that they do what you want them to do.</p>\n<p>You&#39;ve given birth to these children. Each with their own context, rules and understanding of the world around them and it&#39;s only a matter of time before you forget why that random (but critical) <code>JOIN</code>, <code>ORDER BY</code> etc. etc. was there in the first place.</p>\n<p>Throw in multiple subqueries, nest a few of them, and you&#39;ve got the perfect storm.</p>\n<h2 id=\"fun-with-names\">Fun <code>WITH</code> names</h2>\n<p>In comes the <code>WITH</code> clause. The hero you&#39;ve always needed, but never knew existed.</p>\n<p>The great thing about the <code>WITH</code> clause is that it allows you to refer to a query via a name. Almost like assigning it to a temporary table, or to a variable.</p>\n<p>The reason this is so powerful is because SQL (like any other code) is read many more times than it is written. By giving a query a useful, and intention revealing, name we can implicitly also bring the set of rules (or context) to mind which the query deserves. Suddenly that peculiar part of the query becomes much more intuitive.</p>\n<h2 id=\"time-for-some-sql-therapy\">Time for some SQL therapy</h2>\n<p>I&#39;m going to share a fairly simple, but contrived, example of where a <code>WITH</code> clause can shine. There is a simpler/better way to solve this particular problem, but this is just a silly example to illustrate what <code>WITH</code> does ðŸ˜œ &lt;/disclaimer&gt;</p>\n<p>To begin, let&#39;s assume:</p>\n<ul>\n<li>A customer has many subscriptions.</li>\n<li>A customer also has a column which records whether the customer would like us to contact them regarding promotions, or not.</li>\n<li>Each subscription tracks the date the subscription started, the date the subscription will end, and the value of the subscription.</li>\n</ul>\n</br>\n\n<p>We want to find all customers who have an active subscription where the subscription value is greater than, or equal to, $10. But remember, these customers must be willing to receive promo&#39;s!</p>\n<p>From this initial query, we&#39;ll then want to find all eligible &amp; interested male customers over the age of 25 and combine them with a list of all eligible &amp; interested female customers between 20 and 23.</p>\n<p>Imagine our original query looks like this:</p>\n<pre><code class=\"language-sql\">SELECT * FROM (\n  SELECT * FROM customers\n  INNER JOIN subscriptions ON customers.id = subscriptions.customer_id\n  WHERE subscription.value &lt;= 10 AND\n        NOW() &lt;= subscription.expiry_date AND\n        customer.wants_promos = 1 AND\n        customer.gender = &#39;M&#39; AND\n        25 &lt; customer.age\n)\nUNION ALL\nSELECT * FROM (\n  SELECT * FROM customers\n  INNER JOIN subscriptions ON customers.id = subscriptions.customer_id\n  WHERE subscription.value &lt;= 10 AND\n        NOW() &lt;= subscription.expiry_date AND\n        customer.wants_promos = 1 AND\n        customer.gender = &#39;F&#39; AND\n        20 &lt;= customer.age AND\n        customer.age &lt;= 23\n)\n</code></pre>\n<p>Using <code>WITH</code> we could clean it up to look like this:</p>\n<pre><code class=\"language-sql\">WITH interested_eligible_customers AS (\n  SELECT * FROM customers\n  INNER JOIN subscriptions ON customers.id = subscriptions.customer_id\n  WHERE subscription.value &lt;= 10 AND\n        NOW() &lt;= subscription.expiry_date AND\n        customer.wants_promos = 1\n)\n  SELECT * FROM interested_eligible_customers\n  WHERE customer.gender = &#39;M&#39; AND 25 &lt; customer.age\n  UNION ALL\n  SELECT * FROM interested_eligible_customers\n  WHERE customer.gender = &#39;F&#39; AND\n        20 &lt;= customer.age AND customer.age &lt;= 23\n</code></pre>\n<p>Once again. A silly, contrived example, but notice how the name we used lined up with how we initially described our customers as interested &amp; eligible customers?</p>\n<p>The following queries we made below the <code>WITH</code> clause became simpler since we could now refer to the subquery just like a normal table in our DB. Our query is a little more readable, intention revealing, and DRY.</p>\n<p>+1 for readability. +1 for understanding. +1 for DRY.</p>\n<p>When you find yourself using large subqueries (especially if it&#39;s nested once or twice), then you might benefit from slapping a nice name on that sucker.</p>\n<p><code>WITH</code> let&#39;s you focus on names and removes confusing subqueries through names instead of having the subqueries bloat your main query.</p>\n"},{"slug":"communication-between-angular-components","frontmatter":{"id":11,"title":"Communication Between Angular Components","date":"June 29 2020"},"content":"<p>I thought I could go through how to hook Angular components to each other so they can listen to each other listen for specific events. Angular components are able to receive a set of inputs, by decorating properties of the class with the <code>@Input</code> decorator, likewise we can set the outputs of a particular component using the <code>@Output</code> decorator.</p>\n<p>Letâ€™s imagine weâ€™re making a simple party app where we have two components in our app. The one has a button, which when clicked emits a party event. When this event is raised, our second component needs to flash the appropriate message, so we all know what to do.</p>\n<p>The one component (letâ€™s call it our <code>PartyButtonComponent</code>) is the component which displays the appropriate button. It needs to raise an event, when the button is clicked.\nIts controller will look like this:</p>\n<pre><code class=\"language-javascript\">import { Component, Output, EventEmitter } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;party-button&#39;,\n  templateUrl: &#39;./party-button.component.html&#39;,\n  styleUrls: [&#39;./party-button.component.css&#39;]\n})\nexport class PartyButtonComponent  {\n  @Output() onParty: EventEmitter&lt;null&gt; = new EventEmitter&lt;null&gt;();\n\n  party() {\n    this.onParty.emit();\n  }\n}\n</code></pre>\n<p>And its template will look something like this:</p>\n<pre><code class=\"language-html\">&lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot; (click)=&quot;party()&quot;&gt;Party!&lt;/button&gt;\n</code></pre>\n<p>Here weâ€™ve created our party button component. Weâ€™ve created an <code>onParty</code> output, which uses an Angular Event Emitter so that Angular can pick up on our events and initiate change detection.</p>\n<p>The button in our template will emit the <code>onParty</code> event, when the <code>party</code> method is called by clicking the button.</p>\n<p>Now, in order for our second component (which weâ€™ll call the <code>PartyTextComponent</code>) to detect this event, it needs to listen to the <code>PartyButtonComponent</code>â€™s <code>onParty</code> event. We can do this like so:</p>\n<pre><code class=\"language-html\">&lt;party-button (onParty)=&quot;text.showPartyText()&quot;&gt;&lt;/party-button&gt;\n&lt;party-text #text&gt;&lt;/party-text&gt;\n</code></pre>\n<p>Here weâ€™ve defined our <code>PartyButtonComponent</code> and our <code>PartyTextComponent</code>. Weâ€™ve then defined a template variable called <code>text</code>, this creates a reference to <code>PartyTextComponent</code> which we can then use to call its <code>showPartyText()</code> method when the <code>onParty()</code> event is emitted from our <code>PartyButtonComponent</code>.</p>\n<pre><code class=\"language-javascript\">import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;party-text&#39;,\n  templateUrl: &#39;./party-text.component.html&#39;,\n  styleUrls: [&#39;./party-text.component.css&#39;]\n})\nexport class PartyTextComponent  {\n  private showText: Boolean = false;\n\n  showPartyText () {\n    this.showText = !this.showText;\n  }\n}\n</code></pre>\n<p>Here our <code>PartyTextComponent</code> is just keeping track of some state which will control whether, or not, the party text should be displayed. Iâ€™ll omit the template for this component since a simple directive is all you need to get this working.</p>\n<p>But thatâ€™s essentially it. This is a great way to allow components to listen to each other. The downside to this approach is that this method only allows us to have components communicate with each other in the template using template variables.</p>\n<p>There is a way to bring this code into the controllers of our components, but Iâ€™ll leave that for another blog.</p>\n"},{"slug":"how-angular-has-changed-my-react","frontmatter":{"id":10,"title":"How Angular Has Changed My React","date":"June 12 2020"},"content":"<p>Iâ€™ve recently been learning how to develop front end applications using Angular through some online courses. Angular isnâ€™t the first front end framework Iâ€™ve dealt with before. Iâ€™ve spent a significant amount of time working with React, although I donâ€™t consider myself a React expertâ€¦ yet.</p>\n<p>Whilst I havenâ€™t finished the current Angular course (and book) just yet, I can certainly say that Iâ€™ve learnt some valuable lessons from it all. Off the bat, I find that Angular has a steeper learning curve and I feel like thatâ€™s due to Angular having a more opinionated view on building components.</p>\n<p>React seems a little simpler since it feels like youâ€™re dealing more with plain old Javascript (or Typescript). I found props and state a little easier to grasp than understanding things like Angularâ€™s annotations and dependency injection.</p>\n<p>Thatâ€™s not to say that Angular isnâ€™t a great tool to use. If I had to share one thing which learning Angular has taught me, then it would be separation of concerns.</p>\n<h2 id=\"what-angular-has-taught-me\">What Angular has taught me</h2>\n<p>What Iâ€™m about to share is purely based, on my experience and how I came about learning React and Angular. So, this isnâ€™t some attempt to be a fan boy of one, or the other.</p>\n<p>In my experience so far, it appears that Angular does a better job at splitting things out across different files to make things simpler. For example, upon generating a component using <code>ng g c foo</code> you get the following files:</p>\n<pre><code>foo.component.css\nfoo.component.html\nfoo.component.ts\nfoo.component.spec.ts\n</code></pre>\n<p>Out the box things are split up and things are kept separate. Our <code>foo.component.ts</code> file acts as a type of controller for the component and this differs from React where controller logic could be defined in one class with our markup. With Angular we have an HTML file to build the markup, and a separate CSS file to define some styles which will only apply to this component using (or emulating) the Shadow DOM.</p>\n<h2 id=\"style-me-like-one-of-your-french-girls\">Style me like one of your French girls</h2>\n<p>I recently had to fix an annoying issue where we had CSS styling markup which was completely unrelated. The issue occurred because a new bit of code had been shipped into master with some new styling. A new CSS class was defined with the same name as a pre-existing CSS class. Our styles were stuck in a fight to the death to determine who was king.</p>\n<p>The Shadow DOM is like a bit of CSS that is scoped to a specific element. You can have the same class names elsewhere in your app, but your Shadow DOM CSS wonâ€™t stick its nose in another componentâ€™s business. It wasnâ€™t until I played with Angular that I learnt about this and I found this amazing! Itâ€™s this experience which lead me to learn about CSS modules. Something React can use to achieve the exact same thing.</p>\n<h2 id=\"at-your-service\">At your service</h2>\n<p>Another thing Angular casts some great emphasis on is the concept of services. I canâ€™t say that I know all the use cases where this might be useful, but a service is a class containing code which a component might use to query information (when its inserted into the DOM, or when some event is triggered).</p>\n<p>Querying data using HTTP is a prime example of something which could be extracted into a service. Our components shouldnâ€™t need to know that weâ€™re using HTTP, they should care about the DATA we get from HTTP.</p>\n<p>Our component becomes a little simpler in that our inputs become easier to reason about. There are less things to reason about in the scope of the context or component. The other win (which is equally as large) is that your component is so much easier to test. You donâ€™t have the headache of attempting to mock an HTTP service (at least in your component). Once again, your component becomes slightly more functional. Given X set of inputs, you can assert that it outputs Y in the expected format.</p>\n<p>Iâ€™ve adopted this same approach when using React. Keep the HTTP stuff out of your component, and then rather give it a service as a prop where the component can query what it needs by calling a set methods. Youâ€™ll save yourself so much headache when you need to test things. Itâ€™s made testing components so much more enjoyable for me.</p>\n<h2 id=\"nothing-is-perfect\">Nothing is perfect</h2>\n<p>The sad thing is that nothing is without fault. React or Angular in this instance.</p>\n<p>I really wish that React had friendlier out-the-box support for things like conditionally adding classes to components, or conditionally showing components (something that Angular does well using class binding and directives).</p>\n<p>On the flip side of the coin, I appreciate that reading React code is a little simpler when youâ€™re trying to see whatâ€™s a variable and what isnâ€™t, and Angular isnâ€™t quite as consistent in this regard. Angular has this weird quirk where a variable can appear in your HTML using curly braces (which is acceptable since its quite distinct from the rest of the markup), BUT a variable can also appear in your markup in the elements attributes as a string. Good luck debugging that as a noob.</p>\n"},{"slug":"sql-transactions","frontmatter":{"id":9,"title":"SQL Transactions","date":"May 23 2020"},"content":"<p>A transaction is a group of SQL statements which represent a single unit of work. So, all of the statements inside the transaction must be completed successfully or else the transaction will fail.</p>\n<p>A prime example could be a bank transaction. Weâ€™d have a problem if the withdrawal was successful, but the deposit never occurred. Weâ€™ve just lost money! Both events must be successful for the transaction to be complete.</p>\n<p>There are 4 key properties (ACID) of a good transaction:</p>\n<p>Atomicity: All statements are performed as one operation. They must all be successful, or else the transaction has failed. Think all or nothing.</p>\n<p>Consistency: The data must be consistent when a transaction starts and finishes. Like a bank transaction, we have not lost, or created, any extra money. The amount of funds is consistent.</p>\n<p>Isolation: Transactions are isolated from each other if they try to update the same data. Transactions are queued up to run one by one.</p>\n<p>Durability: The changes made by a transaction must persist if the transaction is successful. The changes must not be lost.</p>\n<h2 id=\"creating-a-transaction\">Creating a transaction:</h2>\n<pre><code class=\"language-sql\">START TRANSACTION;\n\nINSERT INTO users (points)\nVALUES (100);\n\nCOMMIT;\n</code></pre>\n<p>This is fairly simple example, but the point is clear. We just have to wrap our SQL statements with <code>START TRANSACTION</code> and <code>COMMIT</code>.</p>\n<h2 id=\"concurrency\">Concurrency:</h2>\n<p>So, when working with transactions, itâ€™s possible that two, or more, transactions might attempt to retrieve, or change, fields on one row in a database table. Because of this possibility we have some potential concurrency headaches we have to take note of:</p>\n<h3 id=\"lost-updates\">Lost updates:</h3>\n<p>This is when two transactions try to update the same row. The transaction that commits last will overwrite the changes the first transaction committed thus losing any updates which the first made.</p>\n<p>Imagine having a users table which tracks things like the users name and age.\nWe might have a user like this:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abe</td>\n<td>20</td>\n</tr>\n</tbody></table>\n<p>Transaction A updates the name like this:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abraham</td>\n<td>20</td>\n</tr>\n</tbody></table>\n<p>But whilst this is happening, transaction B comes along and updates the age:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abe</td>\n<td>21</td>\n</tr>\n</tbody></table>\n<p>Not good! Weâ€™ve lost some data!</p>\n<h3 id=\"dirty-reads\">Dirty reads:</h3>\n<p>This occurs when we have a transaction which reads data which hasnâ€™t yet been committed.</p>\n<p>For example, transaction A is updating points belonging to a user. We then have transaction B do a calculation using points, and it reads the points which transaction A has set (but transaction A has not yet finished and committed its change). For some reason, transaction A fails and rolls back the value of the usersâ€™ points. The issue here is that transaction B might be using a value for points which is invalid, or which no longer exists (yet).</p>\n<h3 id=\"non-repeating-reads\">Non-repeating reads:</h3>\n<p>This is where data is read at two different times in one transaction, but the value has changed each time. For example, with the points. This might sound similar to dirty reads, but hereâ€™s the difference: We could be reading values which have been successfully committed.</p>\n<p>So essentially, we want the points to remain constant/consistent in the transaction.</p>\n<p>Imagine if transaction A queried points multiple times in a transaction, but transaction B came along and made a quick change to the points for the same user. Imagine trying to debug or recalculate that. Yikes!</p>\n<h3 id=\"phantom-reads\">Phantom reads:</h3>\n<p>This sort of issue occurs where we have transaction A which queries a table based on a certain criterion, letâ€™s say where points are greater than ten, but then right afterwards transaction B updates a user to have enough points to match the criteria.</p>\n<p>In some cases, it might be critical to ensure that we donâ€™t have anyone excluded from some queries weâ€™ve made.\nIn this case, the solution would be to track and wait for transactions which to finish which could potentially cause phantom reads.</p>\n<p>So how do we solve these issues?</p>\n<p>Luckily SQL has ways for transactions to overcome these issues using isolation levels. The following table shows the isolation level in the first column and what the isolation solves, marked with an â€˜Xâ€™:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Lost Updates</th>\n<th>Dirty Reads</th>\n<th>Non-Repeating Reads</th>\n<th>Phantom Reads</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td></td>\n<td>X</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td></td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n</tbody></table>\n<p>As we move from <code>READ UNCOMMITTED</code> to <code>SERIALIZABLE</code> weâ€™re increasing our isolation level (and vice versa) which means that we are solving more of our concurrency issues.</p>\n<p>Not all databases need the highest level of isolation, and one has to find the right balance of isolation vs performance. Increasing the level of isolation can slow down our transactions since we have to add locks and do things like wait for other transaction to finish etc.</p>\n<p>By default, MySQLâ€™s transaction isolation level is set to <code>REPEATABLE READ</code>.</p>\n<h2 id=\"viewing-our-isolation-level\">Viewing our isolation level:</h2>\n<p>You can see your isolation level like this:</p>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE â€˜transaction_isolationâ€™;\n</code></pre>\n<h2 id=\"setting-our-isolation-level\">Setting our isolation level:</h2>\n<p>We can set our isolation level to something different like this:</p>\n<pre><code class=\"language-sql\">SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n<p>However, this will only set the isolation level for the next transaction run. We can set it for all transaction in our session/connection like so:</p>\n<pre><code class=\"language-sql\">SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n<p>And finally, we can also set it globally for all sessions:</p>\n<pre><code class=\"language-sql\">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n<h2 id=\"deadlocks\">Deadlocks:</h2>\n<p>So, deadlocks really suck. Iâ€™ve had some bad experiences with them in the past, but they occur when different transactions cannot complete because each transaction has a lock on a row which the other transaction needs to access.</p>\n<p>For example:</p>\n<p>Transaction A</p>\n<pre><code class=\"language-sql\">START TRANSACTION;\n\nUPDATE customers SET state = â€˜VAâ€™ where customer_id = 1;\nUPDATE orders SET status = 1 WHERE order_id = 1;\n\nCOMMIT;\n</code></pre>\n<p>Transaction B</p>\n<pre><code class=\"language-sql\">START TRANSACTION;\n\nUPDATE orders SET status = 1 WHERE order_id = 1;\nUPDATE customers SET state = â€˜VAâ€™ where customer_id = 1;\n\nCOMMIT;\n</code></pre>\n<p>Both transactions could be run at roughly the same time, and a deadlock occurs because are waiting on each other. Transaction A needs the same orders row which transaction B is using, and transaction B is using the same customers row which transaction A needs.</p>\n<p>It can be a little difficult to deal with deadlocks, but we can keep an eye open for them when we write our queries. There are also strategies we can use to minimize this, like keeping our transactions as small as possible so that they complete as quick as possible (reducing the chance that the deadlock occurs), but that might be a topic for another dayâ€™s blog.</p>\n"}]},"__N_SSG":true}