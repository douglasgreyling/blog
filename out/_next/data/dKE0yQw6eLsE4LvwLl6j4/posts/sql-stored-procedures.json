{"pageProps":{"frontmatter":{"id":5,"title":"SQL Stored Procedures","date":"May 14 2020"},"slug":"sql-stored-procedures","content":"<p>SQL allows us to create something called a stored procedure. It’s basically code which has been saved so that we can call it and reuse it when we need it.</p>\n<p>We can even add things like parameters to our stored procedures, so it’s super useful when we don’t want to repetitively write and call a common query.</p>\n<p>Let’s dive into some of the basics of stored procedures.</p>\n<h2 id=\"creating-a-stored-procedure\">Creating a stored procedure:</h2>\n<p>We create a stored procedure like this:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE get_invoices ()\nBEGIN\n  SELECT * FROM invoices;\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>There’s a lot going on here so let’s pick it apart.</p>\n<p>MySQL clients like MySQL workbench use the <code>;</code> delimiter to separate and execute statements.</p>\n<p>A stored procedure consists of multiple statements, but we need to define our stored procedure in a single statement so that SQL reads in the whole procedure definition at once. In order to do this, we need to use the <code>DELIMITER</code> keyword to temporarily redefine the default delimiter. We conventionally use the <code>$$</code> delimiter.\nOnce we’ve done this, then our procedure definition is read as one statement, instead multiple separate statements.</p>\n<p>Next we give the stored procedure a name (<code>get_invoices</code> in this case) and we add the required parenthesis. We’ll talk about placing parameters inside the parenthesis later on.</p>\n<p>Everything between the <code>BEGIN</code> and <code>END</code> is called the procedure body and this is where we define our stored procedure.</p>\n<p>Once we’ve defined the procedure body we’ll close it with <code>END</code> and our new delimiter on the end to finish up our statement.</p>\n<p>Don’t forget to set the default delimiter back to <code>;</code>!</p>\n<h2 id=\"calling-a-stored-procedure\">Calling a stored procedure:</h2>\n<p>We can call/execute a stored procedure like so:</p>\n<pre><code class=\"language-sql\">CALL get_invoices();\n</code></pre>\n<p>You might also see the same thing like this:</p>\n<pre><code class=\"language-sql\">EXEC get_invoices();\n</code></pre>\n<h2 id=\"adding-parameters-to-stored-procedures\">Adding parameters to stored procedures:</h2>\n<p>We can add parameters to our stored procedures by giving the parameter a name and a type between the procedure’s parenthesis:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE get_invoices(amount_due DECIMAL(9, 2))\nBEGIN\n  SELECT * FROM invoices i\n  WHERE c.amount_due &lt;= amount_due;\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>We can then call our store procedure like this:</p>\n<pre><code class=\"language-sql\">CALL get_invoices(1000);\n</code></pre>\n<h2 id=\"some-stored-procedure-fun\">Some stored procedure fun:</h2>\n<p>We can do a bunch of cool things in stored procedures like default conditions when parameters are null.</p>\n<p>Here we return all invoices when our parameter is <code>NULL</code>:</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE get_invoices(amount_due DECIMAL(9, 2))\nBEGIN\n  SELECT * FROM invoices i\n  WHERE i.amount_due = IFNULL(amount_due, i.amount_due);\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>And then call it like this:</p>\n<pre><code class=\"language-sql\">CALL get_invoices(NULL);\n</code></pre>\n<h2 id=\"validating-parameters\">Validating parameters</h2>\n<p>We can validate our parameters and use a signal statement to throw an error with the appropriate code which will describe what type of error occurred.</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE PROCEDURE update_invoice(invoice_id INT, amount_due decimal(9, 2))\nBEGIN\n  IF amount_due &lt; 0 THEN\n   SIGNAL SQLSTATE ‘22003’\n      SET MESSAGE_TEXT = ‘Invalid amount_due;\n  END IF;\n\n  UPDATE invoices i\n  SET\n     i.amount_due = amount_due\n  WHERE i.invoice_id = invoice_id;\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>There’s like a million different kinds of error codes. <a href=\"https://www.ibm.com/support/knowledgecenter/en/SSEPEK_11.0.0/codes/src/tpc/db2z_sqlstatevalues.html\">Check them out here</a>.</p>\n<h2 id=\"deletingdropping-stored-procedures\">Deleting/dropping stored procedures:</h2>\n<p>For the last part of our stored procedure crash course let&#39;s delete/drop a stored procedure:</p>\n<pre><code class=\"language-sql\">DROP PROCEDURE get_invoices;\n</code></pre>\n<p>It’s that simple!</p>\n"},"__N_SSG":true}