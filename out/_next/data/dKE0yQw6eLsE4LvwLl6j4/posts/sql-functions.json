{"pageProps":{"frontmatter":{"id":6,"title":"SQL Functions","date":"May 15 2020"},"slug":"sql-functions","content":"<p>Functions in SQL are very similar to stored procedures, but they are still different.</p>\n<p>Here’s a list of some basic differences between the two:</p>\n<ol>\n<li>A function must return a value, but a stored procedure doesn’t have to. Stored procedures can return 0, or more, values/result sets.</li>\n<li>Functions can be called from procedures, but procedures cannot be called from functions.</li>\n<li>Stored procedures cannot be called in SQL statements using <code>SELECT</code>/<code>WHERE</code>/<code>HAVING</code>, but functions can be.</li>\n</ol>\n<p>This isn’t a complete list, and I’m not sure that I’d bore you with those facts, but these are some of the cool ones I found. There’s definitely more!</p>\n<p>The syntax for creating functions is very similar to the syntax used to create stored procedures.</p>\n<pre><code class=\"language-sql\">DELIMITER $$\n\nCREATE FUNCTION get_average_amount_due(customer_id INT)\nRETURNS DECIMAL(9,2)\nREADS SQL DATA\nBEGIN\n  DECLARE average_amount_due DECIMAL(9, 2) DEFAULT 0;\n  DECLARE total_amount_due DECIMAL(9,2);\n  DECLARE total_invoices INT;\n\n  SELECT SUM(i.amount_due), COUNT(*)\n  INTO total_amount_due, total_invoices\n  FROM invoices i\n  WHERE i.customer_id = customer_id;\n\n  SET average_amount_due = total_amount_due / invoices_count;\n  RETURN IFNULL(average_amount_due, 0);\nEND$$\n\nDELIMITER ;\n</code></pre>\n<p>Ok! That’s it. Done. Next post!</p>\n<p>Nah, let’s break this down since there’s a lot going on. Be sure to read post #5 – SQL Stored Procedures to catch up on any explanations I leave out.</p>\n<p>So, we start by stating that we’re creating a function. It’s much like the definition for creating a stored procedure, except we also define what this function returns, and in this case its <code>DECIMAL(9,2)</code>. This is required when we define a function.</p>\n<p>Next we define some attributes for this function. Here we’ve stated that this function reads sql data. There’s not many attributes so I’ll quickly cover them:</p>\n<ol>\n<li><code>DETERMINISTIC</code> – Given the same values, this function returns the same result. For example, imagine providing values which result in the cost of shipping on an order.</li>\n<li><code>READS SQL DATA</code> – This function reads data from the database.</li>\n<li><code>MODIFIES SQL DATA</code> – This function uses <code>UPDATE</code>, <code>INSERT</code> or <code>DELETE</code> statements.</li>\n</ol>\n<p>We can mix and match any of these, for example a function can use <code>READS SQL DATA</code> and <code>MODIFIES SQL DATA</code>. To do so, just add the next attribute after the other. So that’s attributes done and dusted</p>\n<p>Inside our function body we define some variables and their types using <code>DECLARE</code>. Our statement then sets <code>total_amount_due</code> and <code>total_invoices</code> in our select statement. After that we then set the value of <code>average_amount_due</code> to be <code>total_amount_due</code>/ <code>total_invoices</code>. Nothing too complex.</p>\n<p>Finally, we have to return a value for this function and it has to be a <code>DECIMAL(9,2)</code> and luckily it is. We’re doing a slight trick here to make sure that if the value is <code>NULL</code>, then we return 0.</p>\n<p>That’s it!</p>\n<p>Now we can call this function inside a SQL statement like this:</p>\n<pre><code class=\"language-sql\">SELECT customer_id, get_average_amount_due(customer_id)\nFROM invoices;\n</code></pre>\n<p>Which would return a table that looks something like this:</p>\n<table>\n<thead>\n<tr>\n<th>customer_id</th>\n<th>get_average_amount_due(customer_id)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>90.21</td>\n</tr>\n</tbody></table>\n<p>To end this post, you can also remove a function when you don’t need it anymore and that’s done like this:</p>\n<pre><code class=\"language-sql\">DROP FUNCTION get_average_amount_due;\n</code></pre>\n<p>And boom! It’s gone!</p>\n"},"__N_SSG":true}